<?php
/**
 * @file
 * Code for the FJ16 Programme and job tool feature.
 */

include_once 'fj16_programme_and_job_tool.features.inc';

define('FJ16_BULK_JOBS_LIST', '{D99DB96C-696B-493E-9ABE-6314FC853B39}');
define('FJ16_SKILL_AREA_PREFIX', 'Osaamisalue: ');
define('FJ16_BULK_JOBS_IMAGE_DIR', 'public://programme_and_job_tool');
define('FJ16_GENERATOR_OPENS_DEFAULT', '2016-02-15T21:00:00+02:00');

function fj16_programme_and_job_tool_menu() {
  $menu = array();

  $menu['generator'] = array(
    'page callback' => '_fj16_programme_and_job_tool_generator_page',
    'access arguments' => array('access content')
  );

  $menu['generator/confirm'] = array(
    'page callback' => '_fj16_programme_and_job_tool_generator_confirmation_page',
    'access callback' => TRUE //TODO limit by roles
  );

  $menu['generator/thankyou'] = array(
    'page callback' => '_fj16_programme_and_job_tool_generator_thankyou_page',
    'access callback' => TRUE //TODO limit by roles
  );

  $menu['saml/login'] = array(
    'page callback' => 'fj16_saml_login',
    'access callback' => TRUE
  );

  $menu['saml/consume'] = array(
    'page callback' => 'fj16_saml_consume',
    'access callback' => TRUE
  );

  return $menu;
}

function fj16_programme_and_job_tool_permission() {
  $permissions = array();

  $permissions['choose explorer programme'] = array(
    'title' => 'Choose explorer programme',
    'description' => 'Will-o\'-the-wisps and explorer staff positions'
  );

  $permissions['choose rover or adult programme'] = array(
    'title' => 'Choose rover or adult programme',
    'description' => 'Choose rover or adult staff positions'
  );

  return $permissions;
}

function fj16_programme_and_job_tool_node_view($node, $view_mode, $langcode) {
  $is_correct_type = ($node->type === 'fj16_bulk_job') || ($node->type === 'fj16_will_o_the_wisp');
  $is_current_page = current_path() === 'node/'.$node->nid;
  if($is_correct_type && $is_current_page) {
    $title = field_get_items('node', $node, 'field_localized_title', $langcode)[0]['value'];
    drupal_set_title($title);
  }
}

function fj16_programme_and_job_tool_theme($existing, $type, $theme, $path) {
  return array(
    'fj16_generator_front' => array(
      'variables' => array(
        'intro_text' => NULL,
        'login_link' => NULL,
        'login_intro' => NULL,
        'alternative_login_link' => NULL
      ),
      'template' => 'templates/fj16_generator_front'
    ),
    'fj16_generator_thankyou' => array(
      'variables' => array(
        'job_name' => NULL,
        'contact_name' => NULL,
        'contact_email' => NULL,
        'contact_phone' => NULL,
        'job_further_info' => NULL,
        'will_o_the_wisp_name' => NULL,
        'info_text' => NULL,
        'current_lang' => NULL
      ),
      'template' => 'templates/fj16_generator_thankyou'
    ),
    'fj16_generator_role_select_intro' => array(
      'variables' => array(
        'current_lang' => NULL
      ),
      'template' => 'templates/fj16_generator_role_select'
    )
  );
}

function fj16_programme_and_job_tool_flag_access($flag, $entity_id, $action, $account) {
  if($action === 'flag' && $flag->name === 'fj16_choose_bulk_job') {
    return FALSE;
  }
  if($action === 'flag' && $flag->name === 'fj16_will_o_the_wisp') {
    return FALSE;
  }
  return NULL;
}

function fj16_programme_and_job_tool_is_job_full($nid, $flag) {
  $flag_count = $flag->get_count($nid);
  
  $node = node_load($nid);
  $max_count = $node->field_inventory_maximum[LANGUAGE_NONE][0]['value'];
  $reserved = $node->field_inventory_reserved[LANGUAGE_NONE][0]['value'];

  return $flag_count >= ($max_count - $reserved);
}

function fj16_programme_and_job_tool_is_wotw_full($nid, $flag) {
  $flag_count = $flag->get_count($nid);
  
  $node = node_load($nid);
  $max_count = $node->field_inventory_total[LANGUAGE_NONE][0]['value'];

  return $flag_count >= $max_count;
}

function fj16_programme_and_job_tool_page_alter(&$page) {
  // This is a bit of a hack, but there's no clean way to show custom message
  // when a flag access check prevents flagging.

  $path = current_path();
  $is_flagging = strpos($path, 'flag/flag/fj16_choose_bulk_job') === 0;
  $is_403 = drupal_get_http_header("status") === "403 Forbidden";

  if($is_flagging && $is_403) {
    drupal_set_title(t('This staff position is full'));
    $page['content']['system_main']['main']['#markup'] = t('Unfortunately the staff position you selected is already full. !return and try selecting another one.',
      array('!return' => l(t('Return to the staff position list'), 'generator')));
  }
}

function _fj16_programme_and_job_tool_generator_page() {
  global $user;

  if($user->uid === 0) {
    // Anonymous users
    drupal_set_title(t('Welcome to the generator!'));
    $variables = array(
      'intro_text' => 'The generator is closed. You can log it to check the choices you made.',
      'login_link' => l(t('Log in using ScoutID'), 'saml/login', array('attributes' => array('class' => 'scoutid'))),
      'login_intro' => t('Note: you need to log in with your personal ScoutID.'),
      'alternative_login_link' => t("International guest or not yet a scout/guide? Please !login with your user name and password.", array(
          '!login' => l(t('log in'), 'user', array('query' => array('destination' => 'generator')))
        ))
    );
    return theme('fj16_generator_front', $variables);
  } else if(fj16_user_selections_confirmed($user)) {
    drupal_goto('generator/thankyou');
  } else if(fj16_user_selections_complete($user)) {
    drupal_goto('generator/confirm');
  } else if(fj16_user_has_role_named('explorer')) {
    if(fj16_get_selected_wotw($user) === FALSE) {
      drupal_goto('generator/will-o-the-wisp');
    } else {
      drupal_goto('generator/assignment/explorer');
    }
  } else if(fj16_user_has_role_named('rover or adult')) {
    drupal_goto('generator/assignment');
  } else {
    drupal_set_title(t('Choose your age group'));
    return drupal_get_form('_fj16_programme_and_job_tool_role_form');
  }
}

function _fj16_programme_and_job_tool_generator_confirmation_page() {
  drupal_set_title(t('The generator is closed'));
  return t('Please contact kehitin@roihu2016.fi for further assistance.');
}

function _fj16_programme_and_job_tool_generator_thankyou_page() {
  global $language;
  global $user;
  drupal_set_title(t('Thank you!'));

  $job_title = $name = $email = $phone = $wotw_title = $wotw_edit = '';

  $job = fj16_get_selected_job($user);
  if($job !== FALSE) {
    $job_title = field_get_items('node', $job, 'field_localized_title')[0]['value'];
    $name = field_get_items('node', $job, 'field_contact_name')[0]['value'];
    $email = field_get_items('node', $job, 'field_contact_email')[0]['value'];
    $phone = field_get_items('node', $job, 'field_contact_phone')[0]['value'];
  }

  $wotw = fj16_get_selected_wotw($user);
  if($wotw !== FALSE) {
    $wotw_title = field_get_items('node', $wotw, 'field_localized_title')[0]['value'];
    $wotw_edit = '';
  }

  $variables = array(
    'job_name' => check_plain($job_title),
    'contact_name' => check_plain($name),
    'contact_email' => check_plain($email),
    'contact_phone' => check_plain($phone),
    'job_further_info' => t('The contact person will be in touch within a month.'),
    'will_o_the_wisp_name' => check_plain($wotw_title) . $wotw_edit,
    'info_text' => 'Lorem ipsum dolor sit amet...',
    'current_lang' => $language->language
  );
  return theme('fj16_generator_thankyou', $variables);
}

function _fj16_programme_and_job_tool_role_form($form, &$form_state) {
  global $user;
  global $language;
  $displayed_opens = strtotime(variable_get('fj16_generator_opens', FJ16_GENERATOR_OPENS_DEFAULT));
  $displayed_opens += 10 + ($user->uid % 50);

  $vars = array('current_lang' => $language->language);
  $form['intro'] = array(
    '#markup' => '<div class="intro"><p></p>'. theme('fj16_generator_role_select_intro', $vars) . '</div>'
  );

  $form['#attributes'] = array(
    'id' => 'fj16-generator-role-form',
    'style' => _fj16_generator_open() ? '' : 'display: none',
    'data-opens' => $displayed_opens
  );

  $form['submit_explorer'] = array(
    '#type' => 'submit',
    '#value' => t('Explorer (15-17-years-old)'),
    '#name' => 'explorer'
  );

  $form['submit_rover_or_adult'] = array(
    '#type' => 'submit',
    '#value' => t('Rover or Scouter (18+ years)'),
    '#name' => 'rover_or_adult'
  );

  return $form;
}

function _fj16_programme_and_job_tool_role_form_validate($form, &$form_state) {
  if(!_fj16_generator_open()) {
    form_set_error('', t('The generator is not open yet. Please wait a while.'));
  }
}

function _fj16_programme_and_job_tool_role_form_submit($form, &$form_state) {
  global $user;
  if($user->uid === 0) {
    return;
  }

  $button = $form_state['triggering_element']['#name'];
  if($button === 'explorer') {
    fj16_user_add_role($user, 'explorer');
  } else if($button === 'rover_or_adult') {
    fj16_user_add_role($user, 'rover or adult');
  }

  drupal_goto('generator');
}

function fj16_programme_and_job_tool_form_alter(&$form, &$form_state, $form_id) {
  global $user;

  if(!user_access('administer users') && $form_id === 'user_profile_form') {
    $form['field_confirmed']['#access'] = FALSE;
    $form['field_further_info_for_org']['#access'] = FALSE;

    if(is_numeric($user->name)) {
      $form['account']['current_pass']['#access'] = FALSE;
      $form['account']['pass']['#access'] = FALSE;
      $form['account']['mail']['#access'] = FALSE;
    }
  }

  if(!user_access('administer users') && $form_id === 'user_register_form') {
    drupal_set_title(t('Register'));
    $form['actions']['submit']['#value'] = t('Register');
  }

  if($form_id === 'user_pass_reset') {
    drupal_set_title(t('Confirm your registration'));
    $form['actions']['submit']['#value'] = t('Confirm your registration');
  }
}

function fj16_user_selections_confirmed($user) {
  $account = user_load($user->uid);
  $confirmed = $account->field_confirmed[LANGUAGE_NONE][0]['value'];
  return $confirmed === '1';
}

function fj16_get_user_selections($user) {
  return flag_get_user_flags('node', NULL, $user->uid);
}

function fj16_user_selections_complete($user) {
  $selections = fj16_get_user_selections($user);
  if(fj16_get_selected_job($user) === FALSE) {
    return FALSE;
  }
  if(fj16_user_has_role_named('explorer')) {
    return fj16_get_selected_wotw($user) !== FALSE;
  }
  return TRUE;
}

function fj16_get_selected_job($user) {
  $selections = fj16_get_user_selections($user);
  if(empty($selections['fj16_choose_bulk_job'])) {
    return FALSE;
  }
  $flag = current($selections['fj16_choose_bulk_job']);
  return node_load($flag->entity_id);
}

function fj16_get_selected_wotw($user) {
  $selections = fj16_get_user_selections($user);
  if(empty($selections['fj16_will_o_the_wisp'])) {
    return FALSE;
  }
  $flag = current($selections['fj16_will_o_the_wisp']);
  return node_load($flag->entity_id);
}

function _fj16_generator_open() {
  $generator_opens_str = variable_get('fj16_generator_opens', FJ16_GENERATOR_OPENS_DEFAULT);
  $opens = strtotime($generator_opens_str);
  return $opens < time();
}


// SSO


function fj16_saml_init() {
  require_once('vendor/php-saml/_toolkit_loader.php');
  require DRUPAL_ROOT . '/../fj16-partioid-conf.php';
  return new OneLogin_Saml2_Auth($samlSettingsInfo);
}

function fj16_saml_login() {
  $auth = fj16_saml_init();
  $auth->login();
  drupal_exit();
}

function fj16_saml_consume() {
  $auth = fj16_saml_init();
  $auth->processResponse();
  $errors = $auth->getErrors();
  if(count($errors) > 0 || !$auth->isAuthenticated()) {
    $err_str = print_r($errors, TRUE);
    watchdog('saml', 'SAML login failed with errors: <br><pre>@errors</pre>', array('@errors' => $err_str), WATCHDOG_ERROR);
    return t('Login failed.');
  }

  $attrs = $auth->getAttributes();

  //TODO validate is_suspended, is_scout etc.
  if(count($attrs) > 0) {
    $uid = fj16_find_or_create_user($attrs);
    if(fj16_login_user($uid)) {
      drupal_goto('generator');
    }
  }

  return t('Login failed.');
}

function fj16_find_or_create_user($attrs) {
  print_r($attrs);
  $member_number = $attrs['membernumber'][0];
  if(empty($member_number)) {
    return FALSE;
  }

  $user = user_load_by_name($member_number);
  if($user === FALSE) {
    // User not found, redirect to generator with errors
    watchdog('saml', 'Declined login as @name, no such existing user', array('@name' => $member_number), WATCHDOG_INFO);
    drupal_set_message(t('The generator is closed. You can only log in to check your existing choices, which you do not have.'), 'error');
    drupal_goto('generator');
  } else {
    watchdog('saml', 'Logging in existing SAML user @name', array('@name' => $member_number), WATCHDOG_INFO);
  }

  $first_name = $attrs['firstname'][0];
  $last_name = $attrs['lastname'][0];
  $full_name = $first_name . ' ' . $last_name;
  $email = $attrs['email'][0];

  $user->name = $member_number;
  $user->mail = $email;
  $user->field_name = array(
    LANGUAGE_NONE => array(array('value' => $full_name))
  );
  $user->field_troop = array(
    LANGUAGE_NONE => array(array('value' => 'n/a'))
  );

  user_save($user);

  return $user->uid;
}

function fj16_login_user($uid) {
  global $user;
  if($uid > 1) {
    $user = user_load($uid);
    $login_array = array('username' => $user->name);
    user_login_finalize($login_array);
    return TRUE;
  }
  return FALSE;
}

function fj16_init_user() {
  $account = new stdClass();
  $account->is_new = TRUE;
  $account->pass = user_password(30);
  $account->status = 1;
  $account->roles = array();
  return $account;
}


// SharePoint Integration


/**
 * Implements hook_fj16_lists_to_sync
 */
function fj16_programme_and_job_tool_fj16_lists_to_sync() {
  return array(
    array(
      'source' => FJ16_BULK_JOBS_LIST,
      'destination' => 'fj16_bulk_job'
    )
  );
}

function fj16_get_value_if_set($item, $field) {
  if(isset($item[$field])) {
    return $item[$field];
  }
  return NULL;
}

function fj16_programme_and_job_tool_fj16_sharepoint_api_row_presave_alter(&$node, &$sp_item) {
  $job_types = array(
    'Samoajapesti' => 'explorers',
    'Vaeltaja/aikuispesti' => 'rovers_and_adults',
    'Raksapesti' => 'construction_or_demolition'
  );
  $node->field_job_type[LANGUAGE_NONE][0]['value'] = $job_types[$sp_item['pestin_x0020_tyyppi']];
  
  $node->field_localized_title['fi'][0]['value'] = fj16_get_value_if_set($sp_item, 'title');
  $node->field_localized_title['sv'][0]['value'] = fj16_get_value_if_set($sp_item, 'pestin_x0020_nimi_x0020_ruotsiks');
  $node->field_localized_title['en'][0]['value'] = fj16_get_value_if_set($sp_item, 'pestin_x0020_nimi_x0020_englanni');

  $node->field_job_description['fi'][0]['value'] = fj16_get_value_if_set($sp_item, 'pestin_x0020_kuvaus');
  $node->field_job_description['sv'][0]['value'] = fj16_get_value_if_set($sp_item, 'pestin_x0020_kuvaus_x0020_ruotsi');
  $node->field_job_description['en'][0]['value'] = fj16_get_value_if_set($sp_item, 'pestin_x0020_kuvaus_x0020_englan');

  $node->field_contact_name[LANGUAGE_NONE][0]['value'] = fj16_get_value_if_set($sp_item, 'lis_x00e4_tietoja_x0020_antaa');
  $node->field_contact_phone[LANGUAGE_NONE][0]['value'] = fj16_get_value_if_set($sp_item, 'lis_x00e4_tietoja_x0020_antaa_x0');
  $node->field_contact_email[LANGUAGE_NONE][0]['value'] = fj16_get_value_if_set($sp_item, 'lis_x00e4_tietoja_x0020_antaa_x00');

  $node->field_inventory_minimum[LANGUAGE_NONE][0]['value'] = fj16_get_value_if_set($sp_item, 'varasto_x0020_min');
  $node->field_inventory_maximum[LANGUAGE_NONE][0]['value'] = fj16_get_value_if_set($sp_item, 'varasto_x0020_max');
  $node->field_inventory_reserved[LANGUAGE_NONE][0]['value'] = fj16_get_value_if_set($sp_item, 'varasto_x0020_nyt');

  $image_field = $sp_item['kuva'];

  if(strlen($image_field) > 0) {
    $image_parts = explode(',', $sp_item['kuva']);
    $image_url = $image_parts[0];

    if(empty($node->field_image_url[LANGUAGE_NONE][0]['value']) || $node->field_image_url[LANGUAGE_NONE][0]['value'] !== $image_url) {
      $node->field_image_url[LANGUAGE_NONE][0]['value'] = $image_url;
      $image_object = fj16_programme_and_job_tool_get_image_object($image_url);
      $node->field_job_image = array(
        'und' => array((array) $image_object)
      );
    }
  }

  $tag_names = fj16_programme_and_job_tool_parse_categories($sp_item['avainsanat']);
  $node->field_tags['fi'] = fj16_programme_and_job_tool_produce_tids_for('bulk_jobs_tags', $tag_names['tags'], 'fi');
  $node->field_tags['sv'] = fj16_programme_and_job_tool_produce_tids_for('bulk_jobs_tags', $tag_names['tags'], 'sv');
  $node->field_tags['en'] = fj16_programme_and_job_tool_produce_tids_for('bulk_jobs_tags', $tag_names['tags'], 'en');
  $node->field_skill_areas['fi'] = fj16_programme_and_job_tool_produce_tids_for('bulk_jobs_skill_areas', $tag_names['skill_areas'], 'fi');
  $node->field_skill_areas['sv'] = fj16_programme_and_job_tool_produce_tids_for('bulk_jobs_skill_areas', $tag_names['skill_areas'], 'sv');
  $node->field_skill_areas['en'] = fj16_programme_and_job_tool_produce_tids_for('bulk_jobs_skill_areas', $tag_names['skill_areas'], 'en');
}

function fj16_programme_and_job_tool_parse_categories($raw_tags) {
  $result = array(
    'tags' => array(),
    'skill_areas' => array()
  );

  $parts = explode(';#', $raw_tags);
  foreach($parts as $part) {
    if($part === '') {
      continue;
    } else if(strpos($part, FJ16_SKILL_AREA_PREFIX) === 0) {
      $result['skill_areas'][] = substr($part, strlen(FJ16_SKILL_AREA_PREFIX));
    } else {
      if(strpos($part, ',')) {
        $more_parts = explode(',', $part);
        foreach ($more_parts as $tag) {
          $result['tags'][] = trim($tag);
        }
      } else {
        $result['tags'][] = $part;
      }
    }
  }

  return $result;
}

function fj16_programme_and_job_tool_produce_tids_for($vocabulary_name, $tag_names, $lang) {
  $vocabulary = taxonomy_vocabulary_machine_name_load($vocabulary_name);
  
  $tids = array();
  foreach($tag_names as $tag_name) {
    $term = fj16_programme_and_job_tool_find_or_create_term($vocabulary, $tag_name, $lang);
    $tids[] = array(
      'tid' => $term->tid
    );
  }

  return $tids;
}

function fj16_programme_and_job_tool_find_or_create_term($vocabulary, $sp_tag_name, $lang) {
  $term = fj16_programme_and_job_tool_find_term_by_sp_tag($vocabulary, $sp_tag_name, $lang);
  
  if($term === NULL) {
    $term = new stdClass();
    $term->name = $sp_tag_name;
    $term->vid = $vocabulary->vid;
    $term->language = $lang;
    $term->field_sharepoint_name = array(
      $lang => array(array('value' => $sp_tag_name))
    );
    taxonomy_term_save($term);
  }

  return $term;
}

function fj16_programme_and_job_tool_find_term_by_sp_tag($vocabulary, $sp_tag_name, $lang) {
  $tid = db_select('field_data_field_sharepoint_name', 'f')
    ->condition('entity_type', 'taxonomy_term')
    ->condition('bundle', $vocabulary->machine_name)
    ->condition('language', $lang)
    ->condition('field_sharepoint_name_value', $sp_tag_name)
    ->fields('f', array('entity_id'))
    ->execute()
    ->fetchField();

  if($tid === FALSE) {
    return NULL;
  }

  return taxonomy_term_load($tid);
}

function fj16_programme_and_job_tool_get_image_object($url) {
  $tempfile = fj16_programme_and_job_tool_fetch_image($url);
  if(!$tempfile) {
    return NULL;
  }

  $image_object = NULL;
  if(fj16_programme_and_jobs_tool_is_valid_image($tempfile)) {
    $image_object = fj16_programme_and_job_tool_persist_image($tempfile, $url);
  }

  unlink($tempfile);
  return $image_object;
}

function fj16_programme_and_job_tool_fetch_image($url) {
  $target = file_directory_temp() . '/' . md5($url) . '.tmp';
  if (copy($url, $target)) {
    return $target;
  } else {
    watchdog('fj16_programme_and_jobs_tool', 'Unable to get image: @url',
      array('@url' => $url), WATCHDOG_ERROR, $url);
    return FALSE;
  }
}

function fj16_programme_and_job_tool_persist_image($filepath, $url) {
  $image_info = image_get_info($filepath);
  $extension = $image_info['extension'];
  $destination_filename = md5($url) . '.' . $extension;
  $destination = FJ16_BULK_JOBS_IMAGE_DIR . '/' . $destination_filename;
  $filepath = file_unmanaged_copy($filepath, $destination, FILE_EXISTS_REPLACE);

  $image_object = fj16_programme_and_jobs_tool_find_file_by_url($destination);
  if($image_object === NULL) {
    $image_object = new stdClass();
  }
  $image_object->status = FILE_STATUS_PERMANENT;
  $image_object->uid = 1;
  $image_object->filename = $destination_filename;
  $image_object->uri = $destination;
  $image_object->filemime = $image_info['mime_type'];
  $image_object->filesize = $image_info['file_size'];
  file_save($image_object);
  return $image_object;
}

function fj16_programme_and_jobs_tool_is_valid_image($filepath) {
  return image_get_info($filepath) !== FALSE;
}

function fj16_programme_and_jobs_tool_find_file_by_url($url) {
  $fid = db_select('file_managed', 'f')
    ->condition('uri', $url)
    ->fields('f', array('fid'))
    ->execute()
    ->fetchField();

  if($fid !== FALSE) {
    return file_load($fid);
  }
  return NULL;
}


// For localization

t('Choose this staff position');
t('Your choice has been saved');
t('Staff position selected');
t('Reject this staff position');
t('You have been removed from the staff position [node:title]');
t('Choose this');
t('Will-o\'-the-wisp selected');
t('Deselect this');
t('A welcome message with further instructions has been sent to your e-mail address.');
t('Full!assignment', array('!assignment' => ''));
t("This will-o'-the-wisp is full");
t('This staff position is full');


