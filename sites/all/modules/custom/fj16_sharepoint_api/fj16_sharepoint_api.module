<?php

use Thybag\SharePointAPI;
require_once('vendor/autoload.php');

define('FJ16_WSDL_LOCATION', drupal_get_path('module', 'fj16_sharepoint_api') . '/wsdl.xml');

function fj16_sharepoint_api_get_config() {
  require DRUPAL_ROOT . '/../sharepoint-integration.conf.php';
  return $fj16_sharepoint_config;
}

function fj16_sharepoint_api_get_list_contents($list_guid) {
  $conf = fj16_sharepoint_api_get_config();
  $sp = new SharePointAPI($conf['username'], $conf['password'], FJ16_WSDL_LOCATION, $conf['auth_variant']);
  return $sp->query($list_guid)->all_fields()->get();
}

function fj16_sharepoint_api_get_lookup_value($raw) {
  return substr($raw, strpos($raw, '#') + 1);
}


// Syncing of lists to nodes


function fj16_sharepoint_api_cron() {
  foreach(module_implements('fj16_lists_to_sync') as $module) {
    $lists_to_sync = module_invoke($module, 'fj16_lists_to_sync');
    fj16_sharepoint_api_sync_lists($lists_to_sync);
  }
}

function fj16_sharepoint_api_sync_lists($lists) {
  foreach ($lists as $list) {
    fj16_sharepoint_api_sync_into_nodes($list['source'], $list['destination']);
  }
}

function fj16_sharepoint_api_sync_into_nodes($list_guid, $node_type) {
  watchdog('fj16_sharepoint_api', 'Starting SharePoint import to @node_type.',
    array('@node_type' => $node_type), WATCHDOG_INFO);

  $items = fj16_sharepoint_api_get_list_contents($list_guid);

  if(gettype($items) !== "array" || count($items) === 0) {
    watchdog('fj16_sharepoint_api', 'SharePoint import to @node_type failed', array('@node_type' => $node_type), WATCHDOG_ERROR);
    return;
  }

  $context = array(
    'list_guid' => $list_guid,
    'node_type' => $node_type 
  );
  drupal_alter('fj16_list_content', $items, $context);

  $nids_to_remove = fj16_sharepoint_api_all_nids_of_type($node_type);

  foreach ($items as $item) {
    $nid = fj16_sharepoint_api_row_save($node_type, $item);
    if($nid) {
      unset($nids_to_remove[$nid]);
    }
  }

  $nodes_to_remove = node_load_multiple($nids_to_remove);
  foreach ($nodes_to_remove as $node) {
    $node->status = NODE_NOT_PUBLISHED;
    node_save($node);
  }

  watchdog('fj16_sharepoint_api', 'Synced @num_items items from SharePoint list to @node_type nodes and removed @num_removed items.',
    array('@num_items' => count($items), '@num_removed' => count($nids_to_remove), '@node_type' => $node_type),
    WATCHDOG_INFO);
}

function fj16_sharepoint_api_all_nids_of_type($node_type) {
  $results = db_select('field_data_field_sharepoint_unique_id', 'f')
    ->condition('entity_type', 'node')
    ->condition('bundle', $node_type)
    ->isNotNull('field_sharepoint_unique_id_value')
    ->fields('f', array('entity_id'))
    ->execute();

  $nids = array();
  foreach($results as $result) {
    $nids[$result->entity_id] = $result->entity_id;
  }
  return $nids;
}

function fj16_sharepoint_api_find_node_by_unique_id($node_type, $uniqueid) {
  $nid = db_select('field_data_field_sharepoint_unique_id', 'f')
    ->condition('entity_type', 'node')
    ->condition('bundle', $node_type)
    ->condition('field_sharepoint_unique_id_value', $uniqueid)
    ->fields('f', array('entity_id'))
    ->execute()
    ->fetchField();

  if($nid === FALSE) {
    return NULL;
  }

  return node_load($nid);
}

function fj16_sharepoint_api_row_save($node_type, $item) {
  $node = fj16_sharepoint_api_find_node_by_unique_id($node_type, $item['uniqueid']);
  if($node === NULL) {
    $node = fj16_initialize_node($node_type, $item['title']);
  }
  $node->field_sharepoint_unique_id[LANGUAGE_NONE][0]['value'] = $item['uniqueid'];
  $node->status = NODE_PUBLISHED;

  drupal_alter('fj16_sharepoint_api_row_presave', $node, $item);

  $node = node_submit($node);
  node_save($node);
  return $node->nid;
}
